{"version":3,"sources":["utils.js","SingleColor.js","App.js","index.js"],"names":["rgbToHex","SingleColor","index","rgb","weight","hex","useState","alert","setAlert","bcg","join","hexValue","useEffect","timer","setTimeout","clearTimeout","onClick","navigator","clipboard","writeText","className","style","backgroundColor","App","color","setColor","error","setError","Values","all","list","setList","onSubmit","e","preventDefault","colors","console","log","type","value","onChange","target","placeholder","map","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oLASeA,ICsBAC,EA5BK,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,IAAU,EACzBC,oBAAS,GADgB,mBAC5CC,EAD4C,KACrCC,EADqC,KAE7CC,EAAMN,EAAIO,KAAK,KACfC,EAAQ,WAAON,GASrB,OAPAO,qBAAU,WACR,IAAIC,EAAQC,YAAW,WACrBN,GAAS,KACR,MACH,OAAO,kBAAMO,aAAaF,MACzB,CAACN,IAGF,6BACES,QAAS,WACPR,GAAS,GACTS,UAAUC,UAAUC,UAAUR,IAEhCS,UAAS,gBAAWlB,EAAQ,IAAM,eAClCmB,MAAO,CAAEC,gBAAgB,OAAD,OAASb,EAAT,OAExB,uBAAGW,UAAU,iBAAiBhB,EAA9B,KACA,uBAAGgB,UAAU,eAAeT,GAC3BJ,GAAS,uBAAGa,UAAU,SAAb,0B,gBCwBDG,MA7Cf,WAAgB,IAAD,EACajB,mBAAS,IADtB,mBACNkB,EADM,KACCC,EADD,OAEanB,oBAAS,GAFtB,mBAENoB,EAFM,KAECC,EAFD,OAGWrB,mBAAS,IAAIsB,IAAO,WAAWC,IAAI,KAH9C,mBAGNC,EAHM,KAGAC,EAHA,KAiBb,OACE,oCACE,6BAASX,UAAU,aACjB,+CACA,0BAAMY,SAhBQ,SAACC,GACnBA,EAAEC,iBACF,IACE,IAAIC,EAAS,IAAIP,IAAOJ,GAAOK,IAAI,IACnCO,QAAQC,IAAIF,GACZJ,EAAQI,GACR,MAAOT,GACPC,GAAS,GACTS,QAAQC,IAAIX,MASR,2BACEY,KAAK,OACLC,MAAOf,EACPgB,SAAU,SAACP,GAAD,OAAOR,EAASQ,EAAEQ,OAAOF,QACnCG,YAAY,UACZtB,UAAS,UAAKM,EAAQ,QAAU,QAElC,4BAAQN,UAAU,MAAMkB,KAAK,UAA7B,YAKJ,6BAASlB,UAAU,UAChBU,EAAKa,KAAI,SAACnB,EAAOtB,GAChB,OACE,kBAAC,EAAD,eAAa0C,IAAK1C,GAAWsB,EAA7B,CAAoCtB,MAAOA,EAAOG,IAAKmB,EAAMnB,aCrCzEwC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.590ce5c3.chunk.js","sourcesContent":["function componentToHex(c) {\n  var hex = c.toString(16);\n  return hex.length == 1 ? '0' + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n  return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\nexport default rgbToHex;\n","import React, { useState, useEffect } from 'react';\nimport rgbToHex from './utils';\n\nconst SingleColor = ({ index, rgb, weight, hex }) => {\n  const [alert, setAlert] = useState(false);\n  const bcg = rgb.join(',');\n  const hexValue = `#${hex}`;\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      setAlert(false);\n    }, 1500);\n    return () => clearTimeout(timer);\n  }, [alert]);\n\n  return (\n    <article\n      onClick={() => {\n        setAlert(true);\n        navigator.clipboard.writeText(hexValue);\n      }}\n      className={`color ${index > 10 && 'color-light'}`}\n      style={{ backgroundColor: `rgb(${bcg})` }}\n    >\n      <p className=\"percent-value\">{weight}%</p>\n      <p className=\"color-value\">{hexValue}</p>\n      {alert && <p className=\"alert\"> copied to clipboard</p>}\n    </article>\n  );\n};\n\nexport default SingleColor;\n","import React, { useState } from 'react';\nimport SingleColor from './SingleColor';\n\nimport Values from 'values.js';\n\nfunction App() {\n  const [color, setColor] = useState('');\n  const [error, setError] = useState(false);\n  const [list, setList] = useState(new Values('#f15025').all(10));\n\n  const handlSubmit = (e) => {\n    e.preventDefault();\n    try {\n      let colors = new Values(color).all(10);\n      console.log(colors);\n      setList(colors);\n    } catch (error) {\n      setError(true);\n      console.log(error);\n    }\n  };\n\n  return (\n    <>\n      <section className=\"container\">\n        <h3>Color generator</h3>\n        <form onSubmit={handlSubmit}>\n          <input\n            type=\"text\"\n            value={color}\n            onChange={(e) => setColor(e.target.value)}\n            placeholder=\"#f15025\"\n            className={`${error ? 'error' : null}`}\n          />\n          <button className=\"btn\" type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </section>\n      <section className=\"colors\">\n        {list.map((color, index) => {\n          return (\n            <SingleColor key={index} {...color} index={index} hex={color.hex} />\n          );\n        })}\n      </section>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}